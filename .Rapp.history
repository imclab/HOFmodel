new <- read_html(x = "http://www.baseball-reference.com/awards/hof_2016.shtml")#
#
# manipulate it a bit to get it into a data frame:#
new.tab <- new %>% html_nodes("table") %>% html_table(fill = TRUE)#
new.tab <- new.tab[[1]]#
categories <- as.character(new.tab[1, ])#
new.tab <- new.tab[-1, ]#
names(new.tab) <- categories#
#
# compute number of ballots:#
n.new <- dim(new.tab)[1]#
new.tab <- data.frame(Year = rep(2016, n.new), #
                      new.tab[, 1:3], #
                      Votes = rep(NA, n.new), #
                      new.tab[, 4:dim(new.tab)[2]], #
                      NumBallots = rep(450, n.new))
names(new.tab) <- names(data)
data <- rbind(new.tab, data)
pos <- substr(gsub("[\\*\\/]", "", data[, "PosSummary"]), 1, 1)#
pos[pos == "D"] <- "10"#
pos[pos == "O"] <- "11"#
Position <- c("P", "C", "1B", "2B", "3B", "SS", "LF", "CF", "RF", "DH", "OF")#
Position <- Position[as.numeric(pos)]
data <- cbind(data, Position)
data <- data[-which(data[, "Name"] == "Warren Spahn" & data[, "Year"] == 1958), ]
included.players <- data[data$YoB == "1st" & data$Year > 1966, "Name"]#
data <- data[data$Name %in% included.players, ]
data$YoB <- as.integer(gsub("[a-z]+", "", data$YoB))
p <- data[, "Votes"]/data[, "NumBallots"]#
data <- data.frame(data[, c("Name", "Year", "Votes", "NumBallots")], #
                   p, #
                   data[, c("YoB", "PosSummary", "Position")], #
                   data[, c(7:39)])
p[1:100]
class(data[, "Votes"])
data[1:100, c("Name", "Votes")]
data <- read.csv("HOFraw.csv", stringsAsFactors=FALSE, as.is=TRUE)#
#
# Read in the 2015 ballot results to add to the raw data:#
new <- read_html(x = "http://www.baseball-reference.com/awards/hof_2015.shtml")#
#
# Get number of ballots:#
num.ballots <- new %>% #
  html_nodes("div.table_heading_text") %>% #
  html_text() %>%#
  strsplit(split = " ") %>% #
  unlist() %>% #
  head(1) %>%#
  as.numeric()#
# manipulate it a bit to get it into a data frame:#
new.tab <- new %>% html_nodes("table") %>% html_table(fill = TRUE)#
new.tab <- new.tab[[1]]#
categories <- as.character(new.tab[1, ])#
new.tab <- new.tab[-1, ]#
names(new.tab) <- categories#
#
# compute number of ballots:#
n.new <- dim(new.tab)[1]#
new.tab <- data.frame(Year = rep(2015, n.new), #
                      new.tab, #
                      NumBallots = rep(num.ballots, n.new))#
#
names(new.tab) <- names(data)#
#
# replace old 2015 data with updated 2015 data:#
data <- data[data[, "Year"] != 2015, ]#
data <- rbind(new.tab, data)#
#
# Get rid of the "X" prefix in the name field indicating a player's last ballot#
data[, "Name"] <- gsub("X-", "", data[, "Name"])#
# Add in the 2016 ballot:#
#
# Read in the 2015 ballot results to add to the raw data:#
new <- read_html(x = "http://www.baseball-reference.com/awards/hof_2016.shtml")#
#
# manipulate it a bit to get it into a data frame:#
new.tab <- new %>% html_nodes("table") %>% html_table(fill = TRUE)#
new.tab <- new.tab[[1]]#
categories <- as.character(new.tab[1, ])#
new.tab <- new.tab[-1, ]#
names(new.tab) <- categories#
#
# compute number of ballots:#
n.new <- dim(new.tab)[1]#
new.tab <- data.frame(Year = rep(2016, n.new), #
                      new.tab[, 1:3], #
                      Votes = rep(NA, n.new), #
                      new.tab[, 4:dim(new.tab)[2]], #
                      NumBallots = rep(450, n.new))
names(new.tab) <- names(data)
data <- rbind(new.tab, data)
rownames(data) <- 1:dim(data)[1]
data[1:10, ]
data.frame(names(data), sapply(data, class))
sapply(data, class)
data.frame(sapply(data, class))
rm(list=ls())#
setwd("~/Git/HOFmodel/")#
lu <- function(x) length(unique(x))#
su <- function(x) sort(unique(x))#
count.na <- function(x) sum(is.na(x))#
#
# load libraries:#
library(rvest)#
#
# Raw data from previous years:#
data <- read.csv("HOFraw.csv", stringsAsFactors=FALSE, as.is=TRUE)
sapply(data, class)
data.frame(sapply(data, class))
dim(data)
which(sapply(data, class) == "integer")
as.numeric(which(sapply(data, class) == "integer"))
as.numeric(which(sapply(data, class) == "character"))
as.numeric(which(sapply(data, class) == "numeric"))
new <- read_html(x = "http://www.baseball-reference.com/awards/hof_2015.shtml")#
#
# Get number of ballots:#
num.ballots <- new %>% #
  html_nodes("div.table_heading_text") %>% #
  html_text() %>%#
  strsplit(split = " ") %>% #
  unlist() %>% #
  head(1) %>%#
  as.numeric()#
# manipulate it a bit to get it into a data frame:#
new.tab <- new %>% html_nodes("table") %>% html_table(fill = TRUE)#
new.tab <- new.tab[[1]]#
categories <- as.character(new.tab[1, ])#
new.tab <- new.tab[-1, ]#
names(new.tab) <- categories#
#
# compute number of ballots:#
n.new <- dim(new.tab)[1]#
new.tab <- data.frame(Year = rep(2015, n.new), #
                      new.tab, #
                      NumBallots = rep(num.ballots, n.new))#
#
names(new.tab) <- names(data)
data.frame(sapply(data, class))
data <- data[data[, "Year"] != 2015, ]
data.frame(sapply(data, class))
data <- rbind(new.tab, data)
data.frame(sapply(data, class))
data[, "Name"] <- gsub("X-", "", data[, "Name"])
new <- read_html(x = "http://www.baseball-reference.com/awards/hof_2016.shtml")#
#
# manipulate it a bit to get it into a data frame:#
new.tab <- new %>% html_nodes("table") %>% html_table(fill = TRUE)#
new.tab <- new.tab[[1]]#
categories <- as.character(new.tab[1, ])#
new.tab <- new.tab[-1, ]#
names(new.tab) <- categories#
#
# compute number of ballots:#
n.new <- dim(new.tab)[1]#
new.tab <- data.frame(Year = rep(2016, n.new), #
                      new.tab[, 1:3], #
                      Votes = rep(NA, n.new), #
                      new.tab[, 4:dim(new.tab)[2]], #
                      NumBallots = rep(450, n.new))#
# 450 comes from the HOF ballot tracker estimate#
# Much fewer because the list of BBWAA voters has been "purged" to exclude#
# those who don't follow baseball anymore (i.e. aren't qualified)#
#
names(new.tab) <- names(data)
data <- rbind(new.tab, data)#
rownames(data) <- 1:dim(data)[1]
integer.cols <- c(1, 2, 5,  7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, #
                  28, 30, 32, 33, 34, 36, 37, 38, 39, 41)
character.cols <- c(3, 4, 6, 40)
numeric.cols <- c(10, 11, 12, 13, 22, 23, 24, 25, 29, 31, 35)
for (i in integer.cols) data[, i] <- as.integer(data[, i])
for (i in character.cols) data[, i] <- as.character(data[, i])
for (i in numeric.cols) data[, i] <- as.numeric(data[, i])
sapply(data, class)
data[1:10, ]
pos <- substr(gsub("[\\*\\/]", "", data[, "PosSummary"]), 1, 1)#
pos[pos == "D"] <- "10"#
pos[pos == "O"] <- "11"#
Position <- c("P", "C", "1B", "2B", "3B", "SS", "LF", "CF", "RF", "DH", "OF")#
Position <- Position[as.numeric(pos)]
data <- cbind(data, Position)
data <- data[-which(data[, "Name"] == "Warren Spahn" & data[, "Year"] == 1958), ]
included.players <- data[data$YoB == "1st" & data$Year > 1966, "Name"]
data <- data[data$Name %in% included.players, ]
data$YoB <- as.integer(gsub("[a-z]+", "", data$YoB))
p <- data[, "Votes"]/data[, "NumBallots"]
hist(p)
data <- data.frame(data[, c("Name", "Year", "Votes", "NumBallots")], #
                   p, #
                   data[, c("YoB", "PosSummary", "Position")], #
                   data[, c(7:39)])
hof <- read.csv("HOFregression.csv", as.is = TRUE)
hof
allstar <- read.csv("allstars.csv", as.is = TRUE)#
allstar[, "Year"] <- as.numeric(gsub(" \\(.\\)", "", allstar[, "Year"]))
as <- unique(allstar[, c("Name", "Year")])
df <- data.frame(table(as[, 1]))
df <- df[order(df[, 2], decreasing=TRUE), ]
num.years <- data[match(df[, 1], data[, "Name"]), "Yrs"]
df <- data.frame(Name = as.character(df[, 1]), #
                 ASGames = df[, 2], #
                 Years = num.years)
df[1:20, ]
m <- match(data[, "Name"], df[, 1])
all.star <- df[m, 2]
all.star[is.na(all.star)] <- 0
which(data[, "Name"] == "Ken Griffey")
data[592, ]
data[18, ]
allstar[10]
all.star[10]
which(data[, "Name"] == "Ken Griffey")
all.star[18]
dim(df)
df[1:20, ]
sum(df[, 1] == "Ken Griffey")
as[1:20, ]
sum(as[, 1] == "Ken Griffey")
as[as[, 1] == "Ken Griffey", ]
all.star <- df[m, 2]
all.star[is.na(all.star)] <- 0
all.star[which(data[, "Name"] == "Ken Griffey")[1]] <- 13   # junior#
all.star[which(data[, "Name"] == "Ken Griffey")[2]] <- 3   # senior
data <- cbind(data, all.star)
mitch <- read.csv("mitchell_report.csv", as.is=TRUE)
mitch[, 1] <- gsub(",", "", mitch[, 1])
mitchell.report <- as.numeric(data[, "Name"] %in% mitch[, 1])
suspended <- read.csv("suspended.csv", as.is=TRUE)
suspended <- as.numeric(data[, "Name"] %in% suspended[, 1])
drugs <- mitchell.report + suspended
data <- cbind(data, drugs)
roy <- read.csv("roy_raw.csv", as.is=TRUE)
roy[, 2] <- gsub(", Jr.", "", roy[, 2])  # fix sandy alomar and cal ripken
rookie <- numeric(dim(data)[1])
for (i in 1:dim(data)[1]) rookie[i] <- sum(roy[, 2] == data[i, "Name"])
data <- cbind(data, rookie)
gg <- read.csv("goldglove2_raw.csv", as.is = TRUE, header = FALSE)
ny <- diff(which(!is.na(as.numeric(gg[, 1]))))
dgg <- data.frame(gg[is.na(as.numeric(gg[, 1])), 1:4], #
                  year = c(rep(rep(2013:1958, 2), ny-1), rep(1957, 9)))
dgg[, 2] <- gsub(", Jr.", "", dgg[, 2])
gold <- numeric(dim(data)[1])#
for (i in 1:dim(data)[1]) gold[i] <- sum(dgg[, 2] == data[i, "Name"])
gold[data[, "Name"] == "Ken Griffey"]
dim(gg)
gg[1:10, ]
sum(gg[, 2] == "Ken Griffey")
sum(gg[, 2] == "Ken Griffey Jr.")
dgg[1:10, ]
sum(dgg[, 2] == "Ken Griffey")
dgg[dgg[, 2] == "Ken Griffey", ]
grep("Griffey", gg[, 2])
gg[grep("Griffey", gg[, 2]), ]
which(data[, "Name"] == "Ken Griffey")
gold[which(data[, "Name"] == "Ken Griffey")[2]] <- 0
data <- cbind(data, gold.gloves = gold)
mvp <- read.csv("mvp_raw.csv", as.is = TRUE)#
mvp[, 2] <- gsub("\\*", "", mvp[, 2])#
mvp[, 2] <- gsub("Cal Ripken Jr.", "Cal Ripken", mvp[, 2])
dim(mvp)
mvp[1:20, ]
mvp <- read.csv("mvp_raw.csv", as.is = TRUE)#
mvp[, 2] <- gsub("\\*", "", mvp[, 2])#
mvp[, 2] <- gsub("Cal Ripken Jr.", "Cal Ripken", mvp[, 2])#
mvp[, 2] <- gsub("Ken Griffey Jr.", "Ken Griffey", mvp[, 2])
mvp.freq <- numeric(dim(data)[1])#
for (i in 1:dim(data)[1]) mvp.freq[i] <- sum(mvp[, 2] == data[i, "Name"])
length(mvp.freq)
mvp.freq[18]
mvp.freq[592]
mvp.freq[which(data[, "Name"] == "Ken Griffey")[2]] <- 0
data <- cbind(data, mvp = mvp.freq)
cy <- read.csv("cyyoung_raw.csv", as.is=TRUE)#
cy[, 2] <- gsub(" \\*", "", cy[, 2])#
cy.young <- numeric(dim(data)[1])#
for (i in 1:dim(data)[1]) cy.young[i] <- sum(cy[, 2] == data[i, "Name"])#
data <- cbind(data, cy.young)
one <- read.csv("oneteam_raw.csv", as.is=TRUE)
one[1:20, ]
one <- read.csv("oneteam_raw.csv", as.is=TRUE)#
oneteam <- as.numeric(data[, "Name"] %in% one[, 1])#
data <- cbind(data, oneteam)
data <- data[data[, "Name"] != "Pete Rose", ]#
data[data[, "Name"] == "Kirby Puckett", "oneteam"] <- 1
data[data[, "Name"] %in% c("Augie Galan", "Stan Musial"), "Position"] <- "LF"#
data[data[, "Name"] == "Elmer Valo", "Position"] <- "RF"
# Set a few NA values in the batting fields for pitchers to zero instead of NA:#
data[is.na(data[, "BA"]), c("BA", "OBP", "SLG", "OPS", "OPS.Plus")] <- 0
write.csv(data, file="HOFregression_updated_20151228.csv", #
          quote = FALSE, row.names = FALSE)
rm(list=ls())#
setwd("~/Git/HOFmodel/")#
lu <- function(x) length(unique(x))#
su <- function(x) sort(unique(x))#
count.na <- function(x) sum(is.na(x))#
logit <- function(x) log(x/(1-x))#
expit <- function(x) exp(x)/(1+exp(x))
library(arm)
install.packages("arm")
library(arm)
data <- read.csv(file = "HOFregression_updated_20151228.csv", as.is=TRUE)
n <- dim(data)[1]
n
np <- lu(data[, "Name"])
np
nb <- aggregate(data[, "NumBallots"], list(year=data[, "Year"]), median)[, 2]
nb
prev <- matrix(0, n, 14)#
for (i in 1:n) {#
  if (data[i, "YoB"] > 1) {#
    sel <- data[, "Name"] == data[i, "Name"] & data[, "YoB"] < data[i, "YoB"]#
    prev[i, 1:sum(sel)] <- data[sel, "p"][order(data[sel, "Year"], #
                                                decreasing = TRUE)]#
  }#
}#
colnames(prev) <- paste0("prev", 1:14)#
data <- cbind(data, prev)
AllStarpy <- data[, "all.star"]/data[, "Yrs"]#
data <- cbind(data, AllStarpy)
for (i in c("C", "1B", "2B", "3B", "SS", "LF", "CF", "RF")) {#
  assign(paste0("pos", i), as.numeric(data[, "Position"] == i))#
}#
data <- cbind(data, posC, pos1B, pos2B, pos3B, posSS, posLF, posCF, posRF)
prev1.squared <- data[, "prev1"]^2#
data <- cbind(data, prev1.squared)
ny <- lu(data[, "Year"])#
first.ballot.crowd <- matrix(NA, ny, 5)#
for (i in 1:ny) {#
  for (k in 1:5) {#
  	sel <- data[, "Year"] == su(data[, "Year"])[i] & data[, "YoB"] == 1#
  	if (i == 7) {  # special case for 1973 (Roberto Clemente special election)#
      tmp <- data[sel & data[, "Name"] != "Roberto Clemente", "p"]#
      tmp <- sort(tmp, decreasing = TRUE)[1:k]#
  	  first.ballot.crowd[i, k] <- mean(tmp, na.rm = TRUE)#
  	} else {#
  	  tmp <- sort(data[sel, "p"], decreasing = TRUE)[1:k]#
  	  first.ballot.crowd[i, k] <- mean(tmp, na.rm = TRUE)  	  #
  	}#
  }#
}#
rownames(first.ballot.crowd) <- 1967:max(data[, "Year"])
fb <- matrix(NA, n, 5)#
for (k in 1:5) {#
  fb[, k] <- first.ballot.crowd[(1:ny)[data[, "Year"] - 1966], k]#
}#
colnames(fb) <- paste0("top", 1:5)
data <- cbind(data, fb)
return.ballot.crowd <- numeric(ny)#
for (i in 1:ny) {#
  sel <- data[, "Year"] == su(data[, "Year"])[i] - 1 & #
         data[, "YoB"] > 1 & #
         data[, "YoB"] < 15#
  if (sum(sel) > 0) {#
  	tmp <- sort(data[sel, "p"], decreasing = TRUE)[1:5]#
    return.ballot.crowd[i] <- mean(tmp, na.rm = TRUE)#
  }#
}
rb <- return.ballot.crowd[(1:ny)[data[, "Year"] - 1966]]
data <- cbind(data, rb)
hr500 <- as.numeric(data[, "HR"] >= 500)#
h3000 <- as.numeric(data[, "H"] >= 3000)#
w300 <- as.numeric(data[, "W"] >= 300)#
k3000 <- as.numeric(data[, "SO"] >= 3000)#
data <- cbind(data, hr500, h3000, w300, k3000)
ballot2 <- as.numeric(data[, "YoB"] == 2)#
ballotfinal <- as.numeric(data[, "YoB"] == 15)#
data <- cbind(data, ballot2, ballotfinal)
ballot2.x.prev1 <- data[, "ballot2"]*data[, "prev1"]#
data <- cbind(data, ballot2.x.prev1)
slgdrugs <- as.numeric(data[, "SLG"]*data[, "drugs"])#
hrdrugs <- as.numeric(data[, "HR"]*data[, "drugs"])#
mvpdrugs <- as.numeric(data[, "mvp"]*data[, "drugs"])#
cydrugs <- as.numeric(data[, "cy.young"]*data[, "drugs"])#
data <- cbind(data, slgdrugs, hrdrugs, mvpdrugs, cydrugs)
type <- numeric(n)
type[data[, "Position"] != "P" & data[, "YoB"] == 1] <- 1#
#
# Type 2 = First-ballot pitchers:#
type[data[, "Position"] == "P" & data[, "YoB"] == 1] <- 2#
#
# Type 3 = 2nd or more time on ballot:#
type[data[, "YoB"] > 1] <- 3
nt <- lu(type)
var.names <- as.list(rep(NA, nt))
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", "BA", #
                    "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF", "drugs", "AllStarpy", #
                    "gold.gloves", "rookie", "mvp", "oneteam", "hr500", #
                    "h3000", "slgdrugs", "hrdrugs", "mvpdrugs")#
var.names[[2]] <- c("Yrs", "W", "L", "ERA", "WHIP", "G.1", "GS", "SV", "IP", #
                    "H.1", "HR.1", "BB.1", "SO", "drugs", #
                    "AllStarpy", "gold.gloves", "rookie", "mvp", "cy.young", #
                    "w300", "k3000", "cydrugs")#
var.names[[3]] <- c("prev1", "prev1.squared", "top3", "rb", "ballot2", #
                    "ballotfinal", "ballot2.x.prev1")
pred <- rep(NA, n)#
pred.mat <- matrix(NA, n, 5)#
qbounds <- function(x) quantile(x, c(0.025, 0.250, 0.500, 0.750, 0.975))
coef <- as.list(rep(NA, nt))#
lt <- length(1997:max(data[, "Year"]))#
for (j in 1:nt){#
  coef[[j]] <- matrix(NA, lt, length(var.names[[j]]) + 1)#
  colnames(coef[[j]]) <- c("Intercept", var.names[[j]])#
  rownames(coef[[j]]) <- 1997:max(data[, "Year"])#
}
in.samp <- matrix(NA, lt, nt)
for (t in 1997:max(data[, "Year"])) {#
  print(t)#
  for (j in 1:nt) {#
#
    # Set up the design matrix for this type of prediction:#
    if (j %in% 1:2) sel <- type == j & data[, "Year"] < t#
    if (j > 2) {#
      sel <- type == j & data[, "Year"] < t & data[, "prev1"] >= 0.05#
    }#
    X.mat <- as.matrix(data[sel, var.names[[j]]])#
#
    # Scale the inputs, keeping the means and sds:#
    x.mean <- apply(X.mat, 2, mean)#
    x.sd <- apply(X.mat, 2, sd)#
    X.scale <- X.mat#
    for (i in 1:dim(X.mat)[2]) {#
      if (x.sd[i] != 0) X.scale[, i] <- (X.mat[, i] - x.mean[i])/x.sd[i]#
    }#
    # Fit the model using weak priors:#
    fit <- bayesglm(data[sel, "p"] ~ X.scale, #
                    weights = data[sel, "NumBallots"], #
                    family = binomial(link = "logit"), #
                    prior.mean = 0, prior.scale = 2.5)#
    in.samp[t - 1996, j] <- sd(fit$fitted.values - data[sel, "p"])#
    # Store the coefficients:#
    coef[[j]][t - 1996, ] <- coef(fit)#
#
    # predict this type for the year of interest:#
    sel.test <- type == j & data[, "Year"] == t#
#
    if (sum(sel.test) > 0) {#
      X.mat <- as.matrix(data[sel.test, var.names[[j]]])#
      if (t > 2013 & j == 3 & "top3" %in% var.names[[j]]) {#
      	tmp <- pred[data[, "Year"] == t & type %in% 1:2]#
      	X.mat[, "top3"] <- mean(sort(tmp, decreasing = TRUE)[1:3], na.rm = TRUE)#
      }#
      X.scale <- X.mat#
      for (i in 1:dim(X.mat)[2]) {#
        if (x.sd[i] != 0) X.scale[, i] <- (X.mat[, i] - x.mean[i])/x.sd[i]#
      }#
      beta <- mvrnorm(1000, mu=coef(fit), Sigma=summary(fit)$cov.scaled)#
      pred[sel.test] <- expit(coef(fit)[1] + #
                        X.scale %*% matrix(coef(fit)[-1], ncol = 1))#
      pred.sim <- expit(beta[,1] + X.scale %*% t(beta[, -1]))#
      v.tmp <- rbinom(sum(sel.test)*1000, size = nb[t - 1966], prob = pred.sim)#
      votes.sim <- matrix(v.tmp, sum(sel.test), 1000)/nb[t - 1966]#
      pred.mat[sel.test, ] <- t(apply(votes.sim, 1, qbounds))#
    }#
  }#
}
sel.pred <- data[, "Year"] > 1996 & data[, "Year"] < 2014
rmse <- sqrt(mean((pred[sel.pred] - data[sel.pred, "p"])^2))
rmse.vec <- numeric(nt)#
sel.vec <- as.list(rep(NA, nt))#
for (j in 1:3) sel.vec[[j]] <- sel.pred & type == j#
for (i in 1:nt) {#
  rmse.vec[i] <- sqrt(mean((pred[sel.vec[[i]]] - data[sel.vec[[i]], "p"])^2))#
}
out.samp <- matrix(NA, lt, 3)#
n.out <- matrix(NA, lt, 3)#
for (i in 1:lt) {#
  for (j in 1:3) {#
  	sel <- data[, "Year"] == i + 1996 & type == j#
  	out.samp[i, j] <- sd(pred[sel] - data[sel, "p"])#
  	n.out[i, j] <- sum(sel)#
  }#
}
titles <- c("1st-Ballot Batters", "1st-Ballot Pitchers", "Returning Players")#
par(mfrow=c(1, 3))#
for (j in 1:3) {#
  plot(x = 1997:max(data[, "Year"]), #
       y = in.samp[, j], #
       type="l", #
       ylim=range(c(in.samp[, j], out.samp[-lt, j])), #
       las=1, #
       ylab="RMSE", #
       xlab="Year")#
  lines(1997:(max(data[, "Year"]) - 1), out.samp[-lt, j], lty=2)#
  title(main=titles[j])#
  legend("topright", inset = 0.01, lty = c(1, 2), #
         legend = c("In-sample", "Out-of-sample"))#
}
titles <- c("1st-Ballot Batters", "1st-Ballot Pitchers", "Returning Players")#
par(mfrow=c(1, 3))#
for (j in 1:3) {#
  plot(x = 1997:max(data[, "Year"]), #
       y = in.samp[, j], #
       type="l", #
       ylim=range(c(in.samp[, j], out.samp[-lt, j])), #
       las=1, #
       ylab="RMSE", #
       xlab="Year")#
  lines(1997:(max(data[, "Year"]) - 1), out.samp[-lt, j], lty=2)#
  title(main=titles[j])#
  legend("topright", inset = 0.01, lty = c(1, 2), #
         legend = c("In-sample", "Out-of-sample"))#
}
resids <- data[sel.pred, "p"] - pred[sel.pred]
sel.big <- abs(resids) > 0.1  # select big residuals to display names#
xl <- "Predicted Percentage"
par(mfrow=c(1, 1))#
plot(pred[sel.pred], resids, type="n", las=1, ylab="Actual Vote % - Predicted Vote %", yaxt="n", xlim=c(0, 1.1), xlab=xl, xaxt="n")
axis(2, at=seq(-1, 1, 0.2), labels=paste(seq(-100, 100, 20), "%", sep=""), las=1)#
axis(1, at=seq(0, 1, 0.2), labels=paste0(seq(0, 100, 20), "%"))#
abline(h=seq(-1, 1, 0.1), col=gray(0.8))#
text(pred[sel.pred][sel.big], resids[sel.big], paste(data[sel.pred, "Name"], #
     data[sel.pred, "Year"], sep="-")[sel.big], cex=0.6, col=as.numeric(data[sel.pred, "YoB"][sel.big] == 1) + 1)#
points(pred[sel.pred][!sel.big], resids[!sel.big], col=as.numeric(data[sel.pred, "YoB"][!sel.big] == 1) + 1)#
legend("topright", inset=0.01, col=c(1, 2), pch=19, legend=c("Returning Player", "First Ballot"))#
title(main="'Milestones + 1-team + Returning' Model Residuals")
cover50 <- numeric(nt)#
cover95 <- numeric(nt)#
for (j in 1:nt) {#
  s <- sel.pred & type == j#
  cover50[j] <- sum(data[s, "p"] > pred.mat[s, 2] & #
                    data[s, "p"] < pred.mat[s, 4])/sum(s)#
  cover95[j] <- sum(data[s, "p"] > pred.mat[s, 1] & #
                    data[s, "p"] < pred.mat[s, 5])/sum(s)#
}
sel1997 <- data[, "Year"] == 1997 & type == 1#
d1997 <- data.frame(Name = data[sel1997, "Name"], #
                    Prediction = round(pred[sel1997], 3)*100, #
                    Actual = round(data[sel1997, "p"], 3)*100)
sqrt(mean((d1997[, 2] - d1997[, 3])^2))
sel2014 <- data[, "Year"] == 2014#
d2014 <- data.frame(Name = data[sel2014, "Name"], #
                    Previous = round(data[sel2014, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2014], 3)*100)
d2014 <- d2014[order(d2014[, "Predicted"], decreasing = TRUE), ]
rownames(d2014) <- 1:dim(d2014)[1]
d2014
first2014 <- d2014[d2014[, 2] == 0, ]
rownames(first2014) <- 1:dim(first2014)[1]
first2014
sel2015 <- data[, "Year"] == 2015#
d2015 <- data.frame(Name = data[sel2015, "Name"], #
                    Previous = round(data[sel2015, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2015], 3)*100)
d2015 <- d2015[order(d2015[, "Predicted"], decreasing = TRUE), ]
rownames(d2015) <- 1:dim(d2015)[1]
d2015
sel2016 <- data[, "Year"] == 2016
d2016 <- data.frame(Name = data[sel2016, "Name"], #
                    Previous = round(data[sel2016, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2016], 3)*100)
d2016 <- d2016[order(d2016[, "Predicted"], decreasing = TRUE), ]
rownames(d2016) <- 1:dim(d2016)[1]
d2016
d2016
sum(d2016[, 3])
sum(d2016[, 3]/100)
library(xtable)
print(xtable(d2016, #
             align = c("l", "r", "r")), #
             type = "html")
library(xtable)#
print(xtable(d2016, #
             align = c("l", "l", "r", "r")), #
             type = "html")
data[1:10, ]
d2016 <- data.frame(Name = data[sel2016, "Name"],#
                    YearOnBallot = data[sel2016, "YoB"] #
                    Previous = round(data[sel2016, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2016], 3)*100)
d2016 <- data.frame(Name = data[sel2016, "Name"],#
                    YearOnBallot = data[sel2016, "YoB"], #
                    Previous = round(data[sel2016, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2016], 3)*100)
d2016 <- d2016[order(d2016[, "Predicted"], decreasing = TRUE), ]
rownames(d2016) <- 1:dim(d2016)[1]
print(xtable(d2016, #
             align = c("l", "l", "r", "r")), #
             type = "html")
print(xtable(d2016, #
             align = c("l", "l", "l", "r", "r")), #
             type = "html")
library(xtable)#
print(xtable(d2016, #
             align = c("r", "l", "r", "r", "r")), #
             type = "html")
?xtable
kable(d2016)
library(knitr)
kable(d2016)
# Load a few libraries and set working directory:#
rm(list=ls())#
setwd("~/Git/HOFmodel/")#
lu <- function(x) length(unique(x))#
su <- function(x) sort(unique(x))#
count.na <- function(x) sum(is.na(x))#
logit <- function(x) log(x/(1 - x))#
expit <- function(x) exp(x)/(1 + exp(x))#
#
# Load a library to do Bayesian generalized linear models:#
library(arm)#
#
# New data:#
data <- read.csv(file = "HOFregression_updated_20151228.csv", as.is=TRUE)#
n <- dim(data)[1]#
#
# get number of unique players:#
np <- lu(data[, "Name"])#
#
# Get number of ballots each year:#
nb <- aggregate(data[, "NumBallots"], list(year=data[, "Year"]), median)[, 2]
nb
prev <- matrix(0, n, 14)#
for (i in 1:n) {#
  if (data[i, "YoB"] > 1) {#
    sel <- data[, "Name"] == data[i, "Name"] & data[, "YoB"] < data[i, "YoB"]#
    prev[i, 1:sum(sel)] <- data[sel, "p"][order(data[sel, "Year"], #
                                                decreasing = TRUE)]#
  }#
}#
colnames(prev) <- paste0("prev", 1:14)#
data <- cbind(data, prev)#
#
# Create "All-Star Appearances per year":#
AllStarpy <- data[, "all.star"]/data[, "Yrs"]#
data <- cbind(data, AllStarpy)
for (i in c("C", "1B", "2B", "3B", "SS", "LF", "CF", "RF")) {#
  assign(paste0("pos", i), as.numeric(data[, "Position"] == i))#
}#
data <- cbind(data, posC, pos1B, pos2B, pos3B, posSS, posLF, posCF, posRF)#
#
# Add in previous year's vote squared#
prev1.squared <- data[, "prev1"]^2#
data <- cbind(data, prev1.squared)
ny <- lu(data[, "Year"])#
first.ballot.crowd <- matrix(NA, ny, 5)#
for (i in 1:ny) {#
  for (k in 1:5) {#
  	sel <- data[, "Year"] == su(data[, "Year"])[i] & data[, "YoB"] == 1#
  	if (i == 7) {  # special case for 1973 (Roberto Clemente special election)#
      tmp <- data[sel & data[, "Name"] != "Roberto Clemente", "p"]#
      tmp <- sort(tmp, decreasing = TRUE)[1:k]#
  	  first.ballot.crowd[i, k] <- mean(tmp, na.rm = TRUE)#
  	} else {#
  	  tmp <- sort(data[sel, "p"], decreasing = TRUE)[1:k]#
  	  first.ballot.crowd[i, k] <- mean(tmp, na.rm = TRUE)  	  #
  	}#
  }#
}#
rownames(first.ballot.crowd) <- 1967:max(data[, "Year"])#
#
fb <- matrix(NA, n, 5)#
for (k in 1:5) {#
  fb[, k] <- first.ballot.crowd[(1:ny)[data[, "Year"] - 1966], k]#
}#
colnames(fb) <- paste0("top", 1:5)#
#
# Append these to the data:#
data <- cbind(data, fb)#
#
# Add the mean vote % of the top-5 returning ballot players in each year:#
return.ballot.crowd <- numeric(ny)#
for (i in 1:ny) {#
  sel <- data[, "Year"] == su(data[, "Year"])[i] - 1 & #
         data[, "YoB"] > 1 & #
         data[, "YoB"] < 15#
  if (sum(sel) > 0) {#
  	tmp <- sort(data[sel, "p"], decreasing = TRUE)[1:5]#
    return.ballot.crowd[i] <- mean(tmp, na.rm = TRUE)#
  }#
}#
rb <- return.ballot.crowd[(1:ny)[data[, "Year"] - 1966]]
data <- cbind(data, rb)#
#
# add a few career milestones that are thought to impact HOF voting:#
hr500 <- as.numeric(data[, "HR"] >= 500)#
h3000 <- as.numeric(data[, "H"] >= 3000)#
w300 <- as.numeric(data[, "W"] >= 300)#
k3000 <- as.numeric(data[, "SO"] >= 3000)#
data <- cbind(data, hr500, h3000, w300, k3000)#
#
# Create indicator variables for 2nd ballot and 15th ballot (players are #
# thought to get an extra bump in these two situations)#
ballot2 <- as.numeric(data[, "YoB"] == 2)#
ballotfinal <- as.numeric(data[, "YoB"] == 15)#
data <- cbind(data, ballot2, ballotfinal)#
#
# Interaction between 2nd year and 1st year percentage#
ballot2.x.prev1 <- data[, "ballot2"]*data[, "prev1"]#
data <- cbind(data, ballot2.x.prev1)#
#
# interaction between slugging and drugs:#
slgdrugs <- as.numeric(data[, "SLG"]*data[, "drugs"])#
hrdrugs <- as.numeric(data[, "HR"]*data[, "drugs"])#
mvpdrugs <- as.numeric(data[, "mvp"]*data[, "drugs"])#
cydrugs <- as.numeric(data[, "cy.young"]*data[, "drugs"])#
data <- cbind(data, slgdrugs, hrdrugs, mvpdrugs, cydrugs)
data <- data[-which(data[, "Name"] %in% c("Barry Bonds", "Roger Clemens") & data[, "Year"] == 2013), ]#
n <- dim(data)[1]
# Set up 'type' as a categorical variable for different types of player-years:#
type <- numeric(n)#
#
# Type 1 = First-ballot batters:#
type[data[, "Position"] != "P" & data[, "YoB"] == 1] <- 1#
#
# Type 2 = First-ballot pitchers:#
type[data[, "Position"] == "P" & data[, "YoB"] == 1] <- 2#
#
# Type 3 = 2nd or more time on ballot:#
type[data[, "YoB"] > 1] <- 3#
#
# total number of different types#
# (this changed a few times as I tried different models)#
nt <- lu(type)#
#
# Set up list to hold names of variables to include in the #
# regression model for each type:#
var.names <- as.list(rep(NA, nt))
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", #
                    "BA", "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF")#
var.names[[2]] <- c("Yrs", "W", "L", "G.1", "GS", "SV", "IP", "H.1", "HR.1", #
                    "BB.1", "SO", "ERA", "WHIP")#
# for returning players, just use the previous year's voting percentage#
#  as the sole predictor#
var.names[[3]] <- c("prev1")#
# R1 with Drugs, all-stars and gold gloves:#
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", #
                    "BA", "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF", #
                    "drugs", "AllStarpy", "gold.gloves")#
var.names[[2]] <- c("Yrs", "W", "L", "G.1", "GS", "SV", "IP", "H.1", "HR.1", #
                    "BB.1", "SO", "ERA", "WHIP", #
                    "drugs", "AllStarpy", "gold.gloves")#
var.names[[3]] <- c("prev1")#
# R6: Add in 1-team and milestones for batters, milestones for pitchers,#
# and add top-3 'crowded ballot' and quadratic term for returning-ballot players:#
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", #
                    "BA", "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF", "drugs", "AllStarpy", #
                    "gold.gloves", "rookie", "mvp", "oneteam", "hr500", "h3000")#
var.names[[2]] <- c("Yrs", "W", "L", "ERA", "WHIP", "G.1", "GS", "SV", "IP", #
                    "H.1", "HR.1", "BB.1", "SO", "drugs", #
                    "AllStarpy", "gold.gloves", "rookie", "mvp", "cy.young", #
                    "w300", "k3000")#
var.names[[3]] <- c("prev1", "prev1.squared", "top3", "rb", "ballot2", #
                    "ballotfinal", "ballot2.x.prev1")#
#
# Add in the interaction effect between drug suspicion and a few other variables:#
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", "BA", #
                    "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF", "drugs", "AllStarpy", #
                    "gold.gloves", "rookie", "mvp", "oneteam", "hr500", #
                    "h3000", "slgdrugs", "hrdrugs", "mvpdrugs")#
var.names[[2]] <- c("Yrs", "W", "L", "ERA", "WHIP", "G.1", "GS", "SV", "IP", #
                    "H.1", "HR.1", "BB.1", "SO", "drugs", #
                    "AllStarpy", "gold.gloves", "rookie", "mvp", "cy.young", #
                    "w300", "k3000", "cydrugs")#
var.names[[3]] <- c("prev1", "prev1.squared", "top3", "rb", "ballot2", #
                    "ballotfinal", "ballot2.x.prev1")
pred <- rep(NA, n)#
pred.mat <- matrix(NA, n, 5)#
qbounds <- function(x) quantile(x, c(0.025, 0.250, 0.500, 0.750, 0.975))#
#
coef <- as.list(rep(NA, nt))#
lt <- length(1997:max(data[, "Year"]))#
for (j in 1:nt){#
  coef[[j]] <- matrix(NA, lt, length(var.names[[j]]) + 1)#
  colnames(coef[[j]]) <- c("Intercept", var.names[[j]])#
  rownames(coef[[j]]) <- 1997:max(data[, "Year"])#
}#
#
in.samp <- matrix(NA, lt, nt)
# Loop through years and positions (batter vs. pitcher):#
for (t in 1997:max(data[, "Year"])) {#
  print(t)#
  for (j in 1:nt) {#
#
    # Set up the design matrix for this type of prediction:#
    if (j %in% 1:2) sel <- type == j & data[, "Year"] < t#
    if (j > 2) {#
      sel <- type == j & data[, "Year"] < t & data[, "prev1"] >= 0.05#
    }#
    X.mat <- as.matrix(data[sel, var.names[[j]]])#
#
    # Scale the inputs, keeping the means and sds:#
    x.mean <- apply(X.mat, 2, mean)#
    x.sd <- apply(X.mat, 2, sd)#
    X.scale <- X.mat#
    for (i in 1:dim(X.mat)[2]) {#
      if (x.sd[i] != 0) X.scale[, i] <- (X.mat[, i] - x.mean[i])/x.sd[i]#
    }#
    # Fit the model using weak priors:#
    fit <- bayesglm(data[sel, "p"] ~ X.scale, #
                    weights = data[sel, "NumBallots"], #
                    family = binomial(link = "logit"), #
                    prior.mean = 0, prior.scale = 2.5)#
    in.samp[t - 1996, j] <- sd(fit$fitted.values - data[sel, "p"])#
    # Store the coefficients:#
    coef[[j]][t - 1996, ] <- coef(fit)#
#
    # predict this type for the year of interest:#
    sel.test <- type == j & data[, "Year"] == t#
#
    if (sum(sel.test) > 0) {#
      X.mat <- as.matrix(data[sel.test, var.names[[j]]])#
      if (t > 2013 & j == 3 & "top3" %in% var.names[[j]]) {#
      	tmp <- pred[data[, "Year"] == t & type %in% 1:2]#
      	X.mat[, "top3"] <- mean(sort(tmp, decreasing = TRUE)[1:3], na.rm = TRUE)#
      }#
      X.scale <- X.mat#
      for (i in 1:dim(X.mat)[2]) {#
        if (x.sd[i] != 0) X.scale[, i] <- (X.mat[, i] - x.mean[i])/x.sd[i]#
      }#
      beta <- mvrnorm(1000, mu=coef(fit), Sigma=summary(fit)$cov.scaled)#
      pred[sel.test] <- expit(coef(fit)[1] + #
                        X.scale %*% matrix(coef(fit)[-1], ncol = 1))#
      pred.sim <- expit(beta[,1] + X.scale %*% t(beta[, -1]))#
      v.tmp <- rbinom(sum(sel.test)*1000, size = nb[t - 1966], prob = pred.sim)#
      votes.sim <- matrix(v.tmp, sum(sel.test), 1000)/nb[t - 1966]#
      pred.mat[sel.test, ] <- t(apply(votes.sim, 1, qbounds))#
    }#
  }#
}
# Look at overall rmse:#
sel.pred <- data[, "Year"] > 1996 & data[, "Year"] < 2014#
rmse <- sqrt(mean((pred[sel.pred] - data[sel.pred, "p"])^2))
rmse.vec <- numeric(nt)#
sel.vec <- as.list(rep(NA, nt))#
for (j in 1:3) sel.vec[[j]] <- sel.pred & type == j#
for (i in 1:nt) {#
  rmse.vec[i] <- sqrt(mean((pred[sel.vec[[i]]] - data[sel.vec[[i]], "p"])^2))#
}
rmse.vec
out.samp <- matrix(NA, lt, 3)#
n.out <- matrix(NA, lt, 3)#
for (i in 1:lt) {#
  for (j in 1:3) {#
  	sel <- data[, "Year"] == i + 1996 & type == j#
  	out.samp[i, j] <- sd(pred[sel] - data[sel, "p"])#
  	n.out[i, j] <- sum(sel)#
  }#
}
titles <- c("1st-Ballot Batters", "1st-Ballot Pitchers", "Returning Players")#
par(mfrow=c(1, 3))#
for (j in 1:3) {#
  plot(x = 1997:max(data[, "Year"]), #
       y = in.samp[, j], #
       type="l", #
       ylim=range(c(in.samp[, j], out.samp[-lt, j])), #
       las=1, #
       ylab="RMSE", #
       xlab="Year")#
  lines(1997:(max(data[, "Year"]) - 1), out.samp[-lt, j], lty=2)#
  title(main=titles[j])#
  legend("topright", inset = 0.01, lty = c(1, 2), #
         legend = c("In-sample", "Out-of-sample"))#
}
resids <- data[sel.pred, "p"] - pred[sel.pred]
cover50 <- numeric(nt)#
cover95 <- numeric(nt)#
for (j in 1:nt) {#
  s <- sel.pred & type == j#
  cover50[j] <- sum(data[s, "p"] > pred.mat[s, 2] & #
                    data[s, "p"] < pred.mat[s, 4])/sum(s)#
  cover95[j] <- sum(data[s, "p"] > pred.mat[s, 1] & #
                    data[s, "p"] < pred.mat[s, 5])/sum(s)#
}#
#
# 1997 batters example:#
sel1997 <- data[, "Year"] == 1997 & type == 1#
d1997 <- data.frame(Name = data[sel1997, "Name"], #
                    Prediction = round(pred[sel1997], 3)*100, #
                    Actual = round(data[sel1997, "p"], 3)*100)
sqrt(mean((d1997[, 2] - d1997[, 3])^2))
sel2014 <- data[, "Year"] == 2014#
d2014 <- data.frame(Name = data[sel2014, "Name"], #
                    Previous = round(data[sel2014, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2014], 3)*100)#
d2014 <- d2014[order(d2014[, "Predicted"], decreasing = TRUE), ]#
rownames(d2014) <- 1:dim(d2014)[1]
d2014
first2014 <- d2014[d2014[, 2] == 0, ]#
rownames(first2014) <- 1:dim(first2014)[1]
sel2015 <- data[, "Year"] == 2015#
d2015 <- data.frame(Name = data[sel2015, "Name"], #
                    Previous = round(data[sel2015, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2015], 3)*100)#
d2015 <- d2015[order(d2015[, "Predicted"], decreasing = TRUE), ]#
rownames(d2015) <- 1:dim(d2015)[1]
d2015
sel2016 <- data[, "Year"] == 2016#
d2016 <- data.frame(Name = data[sel2016, "Name"],#
                    YearOnBallot = data[sel2016, "YoB"], #
                    Previous = round(data[sel2016, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2016], 3)*100)#
d2016 <- d2016[order(d2016[, "Predicted"], decreasing = TRUE), ]#
rownames(d2016) <- 1:dim(d2016)[1]
kable(d2016)
rm(list=ls())#
setwd("~/Git/HOFmodel/")#
lu <- function(x) length(unique(x))#
su <- function(x) sort(unique(x))#
count.na <- function(x) sum(is.na(x))#
logit <- function(x) log(x/(1 - x))#
expit <- function(x) exp(x)/(1 + exp(x))#
#
# Load a library to do Bayesian generalized linear models:#
library(arm)#
#
# New data:#
data <- read.csv(file = "HOFregression_updated_20151228.csv", as.is=TRUE)#
n <- dim(data)[1]#
#
# get number of unique players:#
np <- lu(data[, "Name"])#
#
# Get number of ballots each year:#
nb <- aggregate(data[, "NumBallots"], list(year=data[, "Year"]), median)[, 2]#
# I've assumed 450 for 2016#
#
# Create variables for previous year's vote, for 1 up to 14 previous years:#
prev <- matrix(0, n, 14)#
for (i in 1:n) {#
  if (data[i, "YoB"] > 1) {#
    sel <- data[, "Name"] == data[i, "Name"] & data[, "YoB"] < data[i, "YoB"]#
    prev[i, 1:sum(sel)] <- data[sel, "p"][order(data[sel, "Year"], #
                                                decreasing = TRUE)]#
  }#
}#
colnames(prev) <- paste0("prev", 1:14)#
data <- cbind(data, prev)#
#
# Create "All-Star Appearances per year":#
AllStarpy <- data[, "all.star"]/data[, "Yrs"]#
data <- cbind(data, AllStarpy)#
#
# Add indicators for 8 batting positions (DH is the baseline)#
for (i in c("C", "1B", "2B", "3B", "SS", "LF", "CF", "RF")) {#
  assign(paste0("pos", i), as.numeric(data[, "Position"] == i))#
}#
data <- cbind(data, posC, pos1B, pos2B, pos3B, posSS, posLF, posCF, posRF)#
#
# Add in previous year's vote squared#
prev1.squared <- data[, "prev1"]^2#
data <- cbind(data, prev1.squared)#
#
# Add the mean vote percentage of the top-k (k = 1, 2, 3, 4, 5) first-year #
# ballot players in each year:#
# Idea is that this will provide a variable to account for 'crowded' ballots:#
ny <- lu(data[, "Year"])#
first.ballot.crowd <- matrix(NA, ny, 5)#
for (i in 1:ny) {#
  for (k in 1:5) {#
  	sel <- data[, "Year"] == su(data[, "Year"])[i] & data[, "YoB"] == 1#
  	if (i == 7) {  # special case for 1973 (Roberto Clemente special election)#
      tmp <- data[sel & data[, "Name"] != "Roberto Clemente", "p"]#
      tmp <- sort(tmp, decreasing = TRUE)[1:k]#
  	  first.ballot.crowd[i, k] <- mean(tmp, na.rm = TRUE)#
  	} else {#
  	  tmp <- sort(data[sel, "p"], decreasing = TRUE)[1:k]#
  	  first.ballot.crowd[i, k] <- mean(tmp, na.rm = TRUE)  	  #
  	}#
  }#
}#
rownames(first.ballot.crowd) <- 1967:max(data[, "Year"])
fb <- matrix(NA, n, 5)#
for (k in 1:5) {#
  fb[, k] <- first.ballot.crowd[(1:ny)[data[, "Year"] - 1966], k]#
}#
colnames(fb) <- paste0("top", 1:5)#
#
# Append these to the data:#
data <- cbind(data, fb)#
#
# Add the mean vote % of the top-5 returning ballot players in each year:#
return.ballot.crowd <- numeric(ny)#
for (i in 1:ny) {#
  sel <- data[, "Year"] == su(data[, "Year"])[i] - 1 & #
         data[, "YoB"] > 1 & #
         data[, "YoB"] < 15#
  if (sum(sel) > 0) {#
  	tmp <- sort(data[sel, "p"], decreasing = TRUE)[1:5]#
    return.ballot.crowd[i] <- mean(tmp, na.rm = TRUE)#
  }#
}#
rb <- return.ballot.crowd[(1:ny)[data[, "Year"] - 1966]]#
#
# Append these to the data:#
data <- cbind(data, rb)
hr500 <- as.numeric(data[, "HR"] >= 500)#
h3000 <- as.numeric(data[, "H"] >= 3000)#
w300 <- as.numeric(data[, "W"] >= 300)#
k3000 <- as.numeric(data[, "SO"] >= 3000)#
data <- cbind(data, hr500, h3000, w300, k3000)#
#
# Create indicator variables for 2nd ballot and 15th ballot (players are #
# thought to get an extra bump in these two situations)#
ballot2 <- as.numeric(data[, "YoB"] == 2)#
ballotfinal <- as.numeric(data[, "YoB"] == 15)#
data <- cbind(data, ballot2, ballotfinal)#
#
# Interaction between 2nd year and 1st year percentage#
ballot2.x.prev1 <- data[, "ballot2"]*data[, "prev1"]#
data <- cbind(data, ballot2.x.prev1)#
#
# interaction between slugging and drugs:#
slgdrugs <- as.numeric(data[, "SLG"]*data[, "drugs"])#
hrdrugs <- as.numeric(data[, "HR"]*data[, "drugs"])#
mvpdrugs <- as.numeric(data[, "mvp"]*data[, "drugs"])#
cydrugs <- as.numeric(data[, "cy.young"]*data[, "drugs"])#
data <- cbind(data, slgdrugs, hrdrugs, mvpdrugs, cydrugs)#
#
# Try removing Bonds and Clemens first year:#
#data <- data[-which(data[, "Name"] %in% c("Barry Bonds", "Roger Clemens") & data[, "Year"] == 2013), ]#
#n <- dim(data)[1]#
#
# Set up 'type' as a categorical variable for different types of player-years:#
type <- numeric(n)#
#
# Type 1 = First-ballot batters:#
type[data[, "Position"] != "P" & data[, "YoB"] == 1] <- 1#
#
# Type 2 = First-ballot pitchers:#
type[data[, "Position"] == "P" & data[, "YoB"] == 1] <- 2#
#
# Type 3 = 2nd or more time on ballot:#
type[data[, "YoB"] > 1] <- 3#
#
# total number of different types#
# (this changed a few times as I tried different models)#
nt <- lu(type)#
#
# Set up list to hold names of variables to include in the #
# regression model for each type:#
var.names <- as.list(rep(NA, nt))
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", #
                    "BA", "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF")#
var.names[[2]] <- c("Yrs", "W", "L", "G.1", "GS", "SV", "IP", "H.1", "HR.1", #
                    "BB.1", "SO", "ERA", "WHIP")#
# for returning players, just use the previous year's voting percentage#
#  as the sole predictor#
var.names[[3]] <- c("prev1")#
# R1 with Drugs, all-stars and gold gloves:#
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", #
                    "BA", "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF", #
                    "drugs", "AllStarpy", "gold.gloves")#
var.names[[2]] <- c("Yrs", "W", "L", "G.1", "GS", "SV", "IP", "H.1", "HR.1", #
                    "BB.1", "SO", "ERA", "WHIP", #
                    "drugs", "AllStarpy", "gold.gloves")#
var.names[[3]] <- c("prev1")#
# R6: Add in 1-team and milestones for batters, milestones for pitchers,#
# and add top-3 'crowded ballot' and quadratic term for returning-ballot players:#
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", #
                    "BA", "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF", "drugs", "AllStarpy", #
                    "gold.gloves", "rookie", "mvp", "oneteam", "hr500", "h3000")#
var.names[[2]] <- c("Yrs", "W", "L", "ERA", "WHIP", "G.1", "GS", "SV", "IP", #
                    "H.1", "HR.1", "BB.1", "SO", "drugs", #
                    "AllStarpy", "gold.gloves", "rookie", "mvp", "cy.young", #
                    "w300", "k3000")#
var.names[[3]] <- c("prev1", "prev1.squared", "top3", "rb", "ballot2", #
                    "ballotfinal", "ballot2.x.prev1")#
#
# Add in the interaction effect between drug suspicion and a few other variables:#
var.names[[1]] <- c("Yrs", "G", "AB", "R", "H", "HR", "RBI", "SB", "BB", "BA", #
                    "OBP", "SLG",#
                    "posC", "pos1B", "pos2B", "pos3B", "posSS", "posLF", #
                    "posCF", "posRF", "drugs", "AllStarpy", #
                    "gold.gloves", "rookie", "mvp", "oneteam", "hr500", #
                    "h3000", "slgdrugs", "hrdrugs", "mvpdrugs")#
var.names[[2]] <- c("Yrs", "W", "L", "ERA", "WHIP", "G.1", "GS", "SV", "IP", #
                    "H.1", "HR.1", "BB.1", "SO", "drugs", #
                    "AllStarpy", "gold.gloves", "rookie", "mvp", "cy.young", #
                    "w300", "k3000", "cydrugs")#
var.names[[3]] <- c("prev1", "prev1.squared", "top3", "rb", "ballot2", #
                    "ballotfinal", "ballot2.x.prev1")
pred <- rep(NA, n)#
pred.mat <- matrix(NA, n, 5)#
qbounds <- function(x) quantile(x, c(0.025, 0.250, 0.500, 0.750, 0.975))#
#
coef <- as.list(rep(NA, nt))#
lt <- length(1997:max(data[, "Year"]))#
for (j in 1:nt){#
  coef[[j]] <- matrix(NA, lt, length(var.names[[j]]) + 1)#
  colnames(coef[[j]]) <- c("Intercept", var.names[[j]])#
  rownames(coef[[j]]) <- 1997:max(data[, "Year"])#
}#
#
in.samp <- matrix(NA, lt, nt)
for (t in 1997:max(data[, "Year"])) {#
  print(t)#
  for (j in 1:nt) {#
#
    # Set up the design matrix for this type of prediction:#
    if (j %in% 1:2) sel <- type == j & data[, "Year"] < t#
    if (j > 2) {#
      sel <- type == j & data[, "Year"] < t & data[, "prev1"] >= 0.05#
    }#
    X.mat <- as.matrix(data[sel, var.names[[j]]])#
#
    # Scale the inputs, keeping the means and sds:#
    x.mean <- apply(X.mat, 2, mean)#
    x.sd <- apply(X.mat, 2, sd)#
    X.scale <- X.mat#
    for (i in 1:dim(X.mat)[2]) {#
      if (x.sd[i] != 0) X.scale[, i] <- (X.mat[, i] - x.mean[i])/x.sd[i]#
    }#
    # Fit the model using weak priors:#
    fit <- bayesglm(data[sel, "p"] ~ X.scale, #
                    weights = data[sel, "NumBallots"], #
                    family = binomial(link = "logit"), #
                    prior.mean = 0, prior.scale = 2.5)#
    in.samp[t - 1996, j] <- sd(fit$fitted.values - data[sel, "p"])#
    # Store the coefficients:#
    coef[[j]][t - 1996, ] <- coef(fit)#
#
    # predict this type for the year of interest:#
    sel.test <- type == j & data[, "Year"] == t#
#
    if (sum(sel.test) > 0) {#
      X.mat <- as.matrix(data[sel.test, var.names[[j]]])#
      if (t > 2013 & j == 3 & "top3" %in% var.names[[j]]) {#
      	tmp <- pred[data[, "Year"] == t & type %in% 1:2]#
      	X.mat[, "top3"] <- mean(sort(tmp, decreasing = TRUE)[1:3], na.rm = TRUE)#
      }#
      X.scale <- X.mat#
      for (i in 1:dim(X.mat)[2]) {#
        if (x.sd[i] != 0) X.scale[, i] <- (X.mat[, i] - x.mean[i])/x.sd[i]#
      }#
      beta <- mvrnorm(1000, mu=coef(fit), Sigma=summary(fit)$cov.scaled)#
      pred[sel.test] <- expit(coef(fit)[1] + #
                        X.scale %*% matrix(coef(fit)[-1], ncol = 1))#
      pred.sim <- expit(beta[,1] + X.scale %*% t(beta[, -1]))#
      v.tmp <- rbinom(sum(sel.test)*1000, size = nb[t - 1966], prob = pred.sim)#
      votes.sim <- matrix(v.tmp, sum(sel.test), 1000)/nb[t - 1966]#
      pred.mat[sel.test, ] <- t(apply(votes.sim, 1, qbounds))#
    }#
  }#
}#
#
# For M1, M2, and M3, replace regression-based predictions for returning players
sel.pred <- data[, "Year"] > 1996 & data[, "Year"] < 2014#
rmse <- sqrt(mean((pred[sel.pred] - data[sel.pred, "p"])^2))#
#
# Break it down by type:#
rmse.vec <- numeric(nt)#
sel.vec <- as.list(rep(NA, nt))#
for (j in 1:3) sel.vec[[j]] <- sel.pred & type == j#
for (i in 1:nt) {#
  rmse.vec[i] <- sqrt(mean((pred[sel.vec[[i]]] - data[sel.vec[[i]], "p"])^2))#
}#
#
# Compute out-of-sample rmse by year and type:#
out.samp <- matrix(NA, lt, 3)#
n.out <- matrix(NA, lt, 3)#
for (i in 1:lt) {#
  for (j in 1:3) {#
  	sel <- data[, "Year"] == i + 1996 & type == j#
  	out.samp[i, j] <- sd(pred[sel] - data[sel, "p"])#
  	n.out[i, j] <- sum(sel)#
  }#
}#
#
# Plot in-sample vs. out-of-sample rmse:#
titles <- c("1st-Ballot Batters", "1st-Ballot Pitchers", "Returning Players")#
par(mfrow=c(1, 3))#
for (j in 1:3) {#
  plot(x = 1997:max(data[, "Year"]), #
       y = in.samp[, j], #
       type="l", #
       ylim=range(c(in.samp[, j], out.samp[-lt, j])), #
       las=1, #
       ylab="RMSE", #
       xlab="Year")#
  lines(1997:(max(data[, "Year"]) - 1), out.samp[-lt, j], lty=2)#
  title(main=titles[j])#
  legend("topright", inset = 0.01, lty = c(1, 2), #
         legend = c("In-sample", "Out-of-sample"))#
}
cover50 <- numeric(nt)#
cover95 <- numeric(nt)#
for (j in 1:nt) {#
  s <- sel.pred & type == j#
  cover50[j] <- sum(data[s, "p"] > pred.mat[s, 2] & #
                    data[s, "p"] < pred.mat[s, 4])/sum(s)#
  cover95[j] <- sum(data[s, "p"] > pred.mat[s, 1] & #
                    data[s, "p"] < pred.mat[s, 5])/sum(s)#
}#
#
# 1997 batters example:#
sel1997 <- data[, "Year"] == 1997 & type == 1#
d1997 <- data.frame(Name = data[sel1997, "Name"], #
                    Prediction = round(pred[sel1997], 3)*100, #
                    Actual = round(data[sel1997, "p"], 3)*100)#
#
# 1997 batters rmse:#
sqrt(mean((d1997[, 2] - d1997[, 3])^2))#
# 2014 results:#
sel2014 <- data[, "Year"] == 2014#
d2014 <- data.frame(Name = data[sel2014, "Name"], #
                    Previous = round(data[sel2014, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2014], 3)*100)#
d2014 <- d2014[order(d2014[, "Predicted"], decreasing = TRUE), ]#
rownames(d2014) <- 1:dim(d2014)[1]#
#
# Just first-time ballots:#
first2014 <- d2014[d2014[, 2] == 0, ]#
rownames(first2014) <- 1:dim(first2014)[1]#
# 2015 results:#
sel2015 <- data[, "Year"] == 2015#
d2015 <- data.frame(Name = data[sel2015, "Name"], #
                    Previous = round(data[sel2015, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2015], 3)*100)#
d2015 <- d2015[order(d2015[, "Predicted"], decreasing = TRUE), ]#
rownames(d2015) <- 1:dim(d2015)[1]
library(knitr)
kable(d2016)
sel2016 <- data[, "Year"] == 2016#
d2016 <- data.frame(Name = data[sel2016, "Name"],#
                    YearOnBallot = data[sel2016, "YoB"], #
                    Previous = round(data[sel2016, "prev1"], 3)*100, #
                    Predicted = round(pred[sel2016], 3)*100)#
d2016 <- d2016[order(d2016[, "Predicted"], decreasing = TRUE), ]#
rownames(d2016) <- 1:dim(d2016)[1]
kable(d2016)
